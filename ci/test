#!/bin/bash -ex

# shellcheck disable=SC1091


# Display CLI usage information
function print_help {
  cat << EOF
NAME
    test - CLI to simplify testing

SYNOPSIS
    test [global options]

GLOBAL OPTIONS

    --cucumber-api                            - Runs Cucumber API features

    --cucumber-authenticators                 - Runs Cucumber Authenticator features

    --cucumber-rotators                       - Runs Cucumber Rotator features

    --cucumber-policy                         - Runs Cucumber Policy features

    -h | --help                               - Show this message

    --rspec                                   - Runs RSpec specs

EOF
exit
}

# Cleanup started containers, ok they're already gone.
function finish {
  docker-compose down --rmi 'local' --volumes || true
}
trap finish EXIT

export REPORT_ROOT=/src/conjur-server

# Setup and run Cucumber tests.
# args: profile name
# example: run_cucumber_tests 'policy'
function run_cucumber_tests() {
  profile="$1"

  # Create reports folders
  mkdir -p cucumber/$profile/features/reports
  rm -rf cucumber/$profile/features/reports/*

  # Start Conjur and supporting services
  docker-compose up --no-deps -d $services
  docker-compose exec -T conjur conjurctl wait
  docker-compose exec -T conjur conjurctl account create cucumber

  # Grab the admin user API key
  api_key=$(docker-compose exec -T conjur conjurctl \
    role retrieve-key cucumber:user:admin | tr -d '\r')

  # Run the tests
  docker-compose run --no-deps -T --rm $cucumber_env_args -e CONJUR_AUTHN_API_KEY=$api_key cucumber -c \
     "bundle exec cucumber -p $profile --format junit --out cucumber/$profile/features/reports"

  cucumber_env_args=""
  docker-compose down --rmi 'local' --volumes
}

function prepare_env_auth_oidc() {
  docker-compose up --no-deps -d oidc-keycloak
  
  # Fetch oidc-keycloak environment variables
  KEYCLOAK_USER=$(docker-compose exec oidc-keycloak printenv KEYCLOAK_USER | tr -d '\r')
  KEYCLOAK_PASSWORD=$(docker-compose exec oidc-keycloak printenv KEYCLOAK_PASSWORD | tr -d '\r')
  CLIENT_ID=$(docker-compose exec oidc-keycloak printenv CLIENT_ID | tr -d '\r')
  REDIRECT_URI=$(docker-compose exec oidc-keycloak printenv REDIRECT_URI | tr -d '\r')
  CLIENT_SECRET=$(docker-compose exec oidc-keycloak printenv CLIENT_SECRET | tr -d '\r')
  SCOPE=$(docker-compose exec oidc-keycloak printenv SCOPE | tr -d '\r')
  cucumber_env_args="$cucumber_env_args -e KEYCLOAK_USER=$KEYCLOAK_USER"
  cucumber_env_args="$cucumber_env_args -e KEYCLOAK_PASSWORD=$KEYCLOAK_PASSWORD"
  cucumber_env_args="$cucumber_env_args -e CLIENT_ID=$CLIENT_ID"
  cucumber_env_args="$cucumber_env_args -e REDIRECT_URI=$REDIRECT_URI"
  cucumber_env_args="$cucumber_env_args -e CLIENT_SECRET=$CLIENT_SECRET"
  cucumber_env_args="$cucumber_env_args -e PROVIDER_URI=https://keycloak:8443/auth/realms/master"
  cucumber_env_args="$cucumber_env_args -e SCOPE=$SCOPE"

  # Check if keycloak is up
  keycloak_isready?

  # Define oidc-keycloak client
  docker-compose exec oidc-keycloak /scripts/create_client

}

function keycloak_isready?() {
  for i in {1..5}
  do
   sleep=4
   output=$(docker-compose logs oidc-keycloak | grep "started" | wc -l)
   if [ $output -ne 0 ]; then
        echo "Keycloak server is up and ready"
        return 0;
   else
        echo "Keycloak not ready yet sleep number $i for $sleep seconds"
        sleep $sleep
   fi
  done
  echo "Error with keycloak server start or it is too slow"
  return 1
}

# Setup to allow compose to run in an isolated namespace
export COMPOSE_PROJECT_NAME="$(openssl rand -hex 3)"

services="pg conjur"
RUN_ALL=true
RUN_AUTHENTICATORS=false
RUN_ROTATORS=false
RUN_API=false
RUN_POLICY=false
RUN_RSPEC=false
while true ; do
  case "$1" in
    --cucumber-rotators ) RUN_ALL=false ; RUN_ROTATORS=true ; shift ;;
    --cucumber-authenticators ) RUN_ALL=false ; RUN_AUTHENTICATORS=true ; shift ;;
    --cucumber-api ) RUN_ALL=false ; RUN_API=true ; shift ;;
    --cucumber-policy ) RUN_ALL=false ; RUN_POLICY=true ; shift ;;
    --rspec ) RUN_ALL=false ; RUN_RSPEC=true ; shift ;;
    -h | --help ) print_help ; shift ;;
     * ) if [ -z "$1" ]; then break; else echo "$1 is not a valid option"; exit 1; fi;;
  esac
done

# Set release tag for building this version of Conjur
cd ..
# Create Conjur Image
./build.sh -j
# Grab the build tag so we launch the correct version of Conjur
. version_utils.sh
export TAG="$(version_tag)"
cd ci

# Run tests based on what flags were passed
if [[ $RUN_ROTATORS = true || $RUN_ALL = true ]]; then
  services="$services testdb"
  run_cucumber_tests 'rotators'
fi

if [[ $RUN_AUTHENTICATORS = true || $RUN_ALL = true ]]; then
  services="$services oidc-keycloak ldap-server"
  prepare_env_auth_oidc
  run_cucumber_tests 'authenticators'
fi

if [[ $RUN_API = true || $RUN_ALL = true ]]; then
  run_cucumber_tests 'api'
fi

if [[ $RUN_POLICY = true || $RUN_ALL = true ]]; then
  run_cucumber_tests 'policy'
fi

if [[ $RUN_RSPEC = true || $RUN_ALL = true ]]; then
  docker-compose up --no-deps -d pg

  until docker-compose run -T --rm pg psql -U postgres -h pg -c "select 1" -d postgres; do sleep 1; done

  docker-compose run -T --rm --no-deps cucumber -c "
    bundle exec rake db:migrate
    rm -rf $REPORT_ROOT/spec/reports
    bundle exec env CI_REPORTS=$REPORT_ROOT/spec/reports rspec --format progress --require ci/reporter/rspec --format CI::Reporter::RSpecFormatter
  "
fi
